generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  barberShop    BarberShop?   @relation(fields: [barberShopId], references: [id])
  barberShopId  String?       @unique
  appointments  Appointment[]
  role          UserRole      @default(USER)
  Review        Review[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model BarberShop {
  id           String         @id @default(cuid())
  name         String
  description  String?
  userId       String?
  address      String?
  city         String?
  state        String?
  postalCode   String?
  phone        String?
  email        String?
  website      String?
  logo         String?
  images       String[]
  schedules    Schedule[]
  services     Service[]
  appointments Appointment[]
  reviews      Review[]
  workingHours WorkingHours[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  User         User?
}

model Schedule {
  id           String     @id @default(cuid())
  barberShop   BarberShop @relation(fields: [barberShopId], references: [id])
  barberShopId String
  dayOfWeek    DayOfWeek
  timeSlots    String[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Appointment {
  id           String               @id @default(cuid())
  user         User                 @relation(fields: [userId], references: [id])
  userId       String
  barberShop   BarberShop           @relation(fields: [barberShopId], references: [id])
  barberShopId String
  dateTime     DateTime
  status       AppointmentStatus    @default(SCHEDULED)
  services     ServiceAppointment[]
  review       Review?
  notes        String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model Service {
  id           String               @id @default(cuid())
  name         String
  description  String?
  price        Decimal              @db.Decimal(10, 2)
  duration     Int // duração em minutos
  barberShop   BarberShop           @relation(fields: [barberShopId], references: [id])
  barberShopId String
  appointments ServiceAppointment[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model ServiceAppointment {
  id            String      @id @default(cuid())
  service       Service     @relation(fields: [serviceId], references: [id])
  serviceId     String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([serviceId, appointmentId])
}

model Review {
  id            String      @id @default(cuid())
  rating        Int         @db.SmallInt // 1-5 estrelas
  comment       String?
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  barberShop    BarberShop  @relation(fields: [barberShopId], references: [id])
  barberShopId  String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String      @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model WorkingHours {
  id             String     @id @default(cuid())
  barberShop     BarberShop @relation(fields: [barberShopId], references: [id])
  barberShopId   String
  dayOfWeek      DayOfWeek
  startTime      String // formato "HH:mm"
  endTime        String // formato "HH:mm"
  breakStart     String? // formato "HH:mm"
  breakEnd       String? // formato "HH:mm"
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  workingHoursId String

  @@unique([barberShopId, dayOfWeek])
}

enum UserRole {
  USER
  BARBER
  ADMIN
}

enum DayOfWeek {
  SEGUNDA
  TERCA
  QUARTA
  QUINTA
  SEXTA
  SABADO
  DOMINGO
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}
